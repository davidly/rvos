# This shell is for running apps generated by the BA basic compiler in the RISC-V OS emulator rvos.
# This abstraction of _start and riscv_print_text allows the same apps to run on
# physical hardware: the Kendryte K210 Sipeed Maixduino Board.

.text
.align 3

.if 1
.globl _start
.type _start, @function
_start:
        .cfi_startproc

        # the g++ c runtime tries to get random values in the stack above where it
        # should probably because this is not its _start, which reserves space

        addi    sp, sp, -128

        mv      a0, zero  # no arguments
        mv      a1, zero  # no arguments
        jal     main

        li      a0, 0  # exit code
        li      a7, 1  # exit
        ecall
        .cfi_endproc
.endif

.globl riscv_print_text
.type riscv_print_text, @function
riscv_print_text:
        .cfi_startproc
        addi    sp, sp, -32
        sd      ra, 16(sp)

        li      a7, 2  # print asciiz string in a0
        ecall

        ld      ra, 16(sp)
        addi    sp, sp, 32
        jr      ra
        .cfi_endproc

.globl riscv_rand
.type riscv_rand, @function
riscv_rand:
        .cfi_startproc
        addi    sp, sp, -32
        sd      ra, 16(sp)

        li      a7, 0x2000  # get a random 64 bit number in a0
        ecall

        ld      ra, 16(sp)
        addi    sp, sp, 32
        jr      ra
        .cfi_endproc

.globl riscv_exit
.type riscv_exit, @function
riscv_exit:
        .cfi_startproc
        addi    sp, sp, -32
        sd      ra, 16(sp)

        li      a7, 1        # exit with code in a0
        ecall

        ld      ra, 16(sp)
        addi    sp, sp, 32
        jr      ra
        .cfi_endproc

.globl riscv_print_double
.type riscv_print_double, @function
riscv_print_double:
        .cfi_startproc
        addi    sp, sp, -32
        sd      ra, 16(sp)

        li      a7, 0x2001        
        ecall

        ld      ra, 16(sp)
        addi    sp, sp, 32
        jr      ra
        .cfi_endproc

.globl riscv_gettimeofday
.type riscv_gettimeofday, @function
riscv_gettimeofday:
        .cfi_startproc
        addi    sp, sp, -32
        sd      ra, 16(sp)

        li      a7, 169
        ecall

        ld      ra, 16(sp)
        addi    sp, sp, 32
        jr      ra
        .cfi_endproc

