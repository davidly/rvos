Tue 02/13/2024 10:48:59.04 

-------------------------------------------------------------------------------
   ROBOCOPY     ::     Robust File Copy for Windows                              
-------------------------------------------------------------------------------

  Started : Tuesday, February 13, 2024 10:48:59 AM
   Source : \\lee-server\documents\scratch\debianrv\
     Dest : C:\Users\david\OneDrive\rvos\debianrv\

    Files : *
	    
  Options : /S /DCOPY:DA /COPY:DAT /R:1000000 /W:30 

------------------------------------------------------------------------------

	                  38	\\lee-server\documents\scratch\debianrv\
	  *EXTRA File 		    6159	baseline_linux_test.txt
	  *EXTRA File 		    6166	linux_test.txt
	  *EXTRA File 		  592188	rvctable.txt
	  *EXTRA File 		  601251	sorted.txt
	  *EXTRA File 		    3536	tp.bas
	  *EXTRA File 		  601251	words.txt
	                  33	\\lee-server\documents\scratch\debianrv\rust\

------------------------------------------------------------------------------

               Total    Copied   Skipped  Mismatch    FAILED    Extras
    Dirs :         2         0         2         0         0         0
   Files :        71         0        71         0         0         6
   Bytes :  132.16 m         0  132.16 m         0         0    1.72 m
   Times :   0:00:00   0:00:00                       0:00:00   0:00:00
   Ended : Tuesday, February 13, 2024 10:49:00 AM

running C test app t using brk heap 
a: 0 4000000000000000
a: 4 0
ua: 0 4000000000000000
ua: 4 0
a: ffffffffffffffff ffffffffffffffff
a: ffffffffffffffff ffffffffffffffdf = -33
int8_t result: 6
uint8_t result: 6
int16_t result: 6
uint16_t result: 6
int32_t result: 6
uint32_t result: 6
int64_t result: 6
uint64_t result: 6
int128_t result: 6
uint128_t result: 6
end of the app
running C test app t using mmap heap 
a: 0 4000000000000000
a: 4 0
ua: 0 4000000000000000
ua: 4 0
a: ffffffffffffffff ffffffffffffffff
a: ffffffffffffffff ffffffffffffffdf = -33
int8_t result: 6
uint8_t result: 6
int16_t result: 6
uint16_t result: 6
int32_t result: 6
uint32_t result: 6
int64_t result: 6
uint64_t result: 6
int128_t result: 6
uint128_t result: 6
end of the app
running C test app glob using brk heap 
in CTest constructor
top main
value of ctest::foo: 666
end of main
in ~CTest destructor
running C test app glob using mmap heap 
in CTest constructor
top main
value of ctest::foo: 666
end of main
in ~CTest destructor
running C test app ts using brk heap 
top of app
print an int 27
print an int64_t 27
sizeof T: 1, result: ff
sizeof T: 1, result: 7f
sizeof T: 2, result: ffff
sizeof T: 2, result: 7fff
sizeof T: 4, result: ffffffff
sizeof T: 4, result: 7fffffff
sizeof T: 8, result: ffffffffffffffff
sizeof T: 8, result: 7fffffffffffffff
now test left shifts
sizeof T: 1, result: fe
sizeof T: 1, result: fe
sizeof T: 2, result: fffe
sizeof T: 2, result: fffe
sizeof T: 4, result: fffffffe
sizeof T: 4, result: fffffffe
sizeof T: 8, result: fffffffffffffffe
sizeof T: 8, result: fffffffffffffffe
now test comparisons
sizeof T: 4, result: 1
sizeof T: 4, result: 1
sizeof T: 4, result: 1
sizeof T: 4, result: 1
sizeof T: 4, result: 1
sizeof T: 4, result: 1
sizeof T: 4, result: 1
sizeof T: 4, result: 1
sizeof T: 4, result: 1
sizeof T: 4, result: 1
sizeof T: 4, result: 1
sizeof T: 4, result: 1
testing printf
  string: 'hello'
  char: 'h'
  int: 27, 1b
  negative int: -27, ffffffe5
  int64_t: 27, 1b
  negative int64_t: -27, ffffffffffffffe5
  float: 3.141573
  negative float: -3.141573
stop
running C test app ts using mmap heap 
top of app
print an int 27
print an int64_t 27
sizeof T: 1, result: ff
sizeof T: 1, result: 7f
sizeof T: 2, result: ffff
sizeof T: 2, result: 7fff
sizeof T: 4, result: ffffffff
sizeof T: 4, result: 7fffffff
sizeof T: 8, result: ffffffffffffffff
sizeof T: 8, result: 7fffffffffffffff
now test left shifts
sizeof T: 1, result: fe
sizeof T: 1, result: fe
sizeof T: 2, result: fffe
sizeof T: 2, result: fffe
sizeof T: 4, result: fffffffe
sizeof T: 4, result: fffffffe
sizeof T: 8, result: fffffffffffffffe
sizeof T: 8, result: fffffffffffffffe
now test comparisons
sizeof T: 4, result: 1
sizeof T: 4, result: 1
sizeof T: 4, result: 1
sizeof T: 4, result: 1
sizeof T: 4, result: 1
sizeof T: 4, result: 1
sizeof T: 4, result: 1
sizeof T: 4, result: 1
sizeof T: 4, result: 1
sizeof T: 4, result: 1
sizeof T: 4, result: 1
sizeof T: 4, result: 1
testing printf
  string: 'hello'
  char: 'h'
  int: 27, 1b
  negative int: -27, ffffffe5
  int64_t: 27, 1b
  negative int64_t: -27, ffffffffffffffe5
  float: 3.141573
  negative float: -3.141573
stop
running C test app sieve using brk heap 
1899 primes.
running C test app sieve using mmap heap 
1899 primes.
running C test app e using brk heap 
271828182845904523536028747135266249775724709369995957496696762772407663035354759457138217852516642742746639193200305992181741359662904357290033429526059563073813232862794349076323382988075319
done
running C test app e using mmap heap 
271828182845904523536028747135266249775724709369995957496696762772407663035354759457138217852516642742746639193200305992181741359662904357290033429526059563073813232862794349076323382988075319
done
running C test app tap using brk heap 
starting, should tend towards 1.2020569031595942854...
  at           10 iterations: 1.19753198567419305576
  at          100 iterations: 1.20200740065967814907
  at         1000 iterations: 1.20205640365934329772
  at        10000 iterations: 1.20205689816009808624
  at       100000 iterations: 1.20205690310973234425
next implementation...
  at           10 iterations: 1.25000000000000000000
  at          100 iterations: 1.14942528735632176762
  at         1000 iterations: 1.21802679658952506259
  at        10000 iterations: 1.20293516179477921746
done
running C test app tap using mmap heap 
starting, should tend towards 1.2020569031595942854...
  at           10 iterations: 1.19753198567419305576
  at          100 iterations: 1.20200740065967814907
  at         1000 iterations: 1.20205640365934329772
  at        10000 iterations: 1.20205689816009808624
  at       100000 iterations: 1.20205690310973234425
next implementation...
  at           10 iterations: 1.25000000000000000000
  at          100 iterations: 1.14942528735632176762
  at         1000 iterations: 1.21802679658952506259
  at        10000 iterations: 1.20293516179477921746
done
running C test app tpi using brk heap 
314159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535
running C test app tpi using mmap heap 
314159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535
running C test app tphi using brk heap 
should tend towards 1.61803398874989484820458683436563811772030
  at  5 iterations: 1.6250000000000000
  at 10 iterations: 1.6179775280898876
  at 15 iterations: 1.6180344478216819
  at 20 iterations: 1.6180339850173580
  at 25 iterations: 1.6180339887802426
  at 30 iterations: 1.6180339887496482
  at 35 iterations: 1.6180339887498969
  at 40 iterations: 1.6180339887498949
done
running C test app tphi using mmap heap 
should tend towards 1.61803398874989484820458683436563811772030
  at  5 iterations: 1.6250000000000000
  at 10 iterations: 1.6179775280898876
  at 15 iterations: 1.6180344478216819
  at 20 iterations: 1.6180339850173580
  at 25 iterations: 1.6180339887802426
  at 30 iterations: 1.6180339887496482
  at 35 iterations: 1.6180339887498969
  at 40 iterations: 1.6180339887498949
done
running C test app tins using brk heap 
hello
test instructions is complete
running C test app tins using mmap heap 
hello
test instructions is complete
running C test app terrno using brk heap 
running C test app terrno using mmap heap 
running C test app tp using brk heap 
start time: 10:49:03.910
14536 microseconds for 1 iterations
end time: 10:49:03.924
final move count 6493
running C test app tp using mmap heap 
start time: 10:49:03.936
13235 microseconds for 1 iterations
end time: 10:49:03.949
final move count 6493
running C test app ttt using brk heap 
starting...
64930 moves
33.281002 milliseconds
running C test app ttt using mmap heap 
starting...
64930 moves
33.020000 milliseconds
running C test app tf using brk heap 
hello from printf
float from printf: 45.678000
division result: 333.333344, square root 18.257420
result of 20.2 * -1.342: -27.108400
result of 20.2 * -1.342 as a double: -27.108400
sinf of 30 degress is 0.500000
cosf of 30 degrees is 0.866025
tanf of 30 degrees is 0.577350
atanf of 1.000000 is 0.785398
atan2f of 0.3, 0.2 is 0.982794
acosf of 0.3 is 1.266104
asinf of 0.3 is 0.304693
tanhf of 2.2 is 0.304693
logf of 0.3: -1.203973
log10f of 300: 2.477121
pi has mantissa: 0.785398, exponent 2
l,le,l,le,l,le,l,le,l,le,l,le,l,le,l,le,g,ge,g,ge,g,ge,
stop
running C test app tf using mmap heap 
hello from printf
float from printf: 45.678000
division result: 333.333344, square root 18.257420
result of 20.2 * -1.342: -27.108400
result of 20.2 * -1.342 as a double: -27.108400
sinf of 30 degress is 0.500000
cosf of 30 degrees is 0.866025
tanf of 30 degrees is 0.577350
atanf of 1.000000 is 0.785398
atan2f of 0.3, 0.2 is 0.982794
acosf of 0.3 is 1.266104
asinf of 0.3 is 0.304693
tanhf of 2.2 is 0.304693
logf of 0.3: -1.203973
log10f of 300: 2.477121
pi has mantissa: 0.785398, exponent 2
l,le,l,le,l,le,l,le,l,le,l,le,l,le,l,le,g,ge,g,ge,g,ge,
stop
running C test app tm using brk heap 
success
running C test app tm using mmap heap 
success
running C test app ttime using brk heap 
before TZ is set: tz: 'PacificStandardTime+8', year: 2024, month 2, day 13, hour 10, min 49, sec 4
east coast time: set tz 'TZ=EST+5' tz: 'EST+5', year: 2024, month 2, day 13, hour 13, min 49, sec 4
west coast time: set tz 'TZ=PST+8' tz: 'PST+8', year: 2024, month 2, day 13, hour 10, min 49, sec 4
TZ=<blank>: set tz 'TZ=' tz: '', year: 2024, month 2, day 13, hour 18, min 49, sec 4
running C test app ttime using mmap heap 
before TZ is set: tz: 'PacificStandardTime+8', year: 2024, month 2, day 13, hour 10, min 49, sec 4
east coast time: set tz 'TZ=EST+5' tz: 'EST+5', year: 2024, month 2, day 13, hour 13, min 49, sec 4
west coast time: set tz 'TZ=PST+8' tz: 'PST+8', year: 2024, month 2, day 13, hour 10, min 49, sec 4
TZ=<blank>: set tz 'TZ=' tz: '', year: 2024, month 2, day 13, hour 18, min 49, sec 4
running C test app td using brk heap 
sprintf double 3.14159265358979311600
double from printf: 3.14159265358979311600
float from printf: 1.202057
double from printf r: -3.776373
sqrt of pi: 1.772454
pi in radians: 0.523599
sin of 30 degress is 0.500000
cos of 30 degrees is 0.866025
tan of 30 degrees is 0.577350
atan of 1.000000 is 0.785398
atan2 of 0.3, 0.2 is 0.982794
acos of 0.3 is 1.266104
asin of 0.3 is 0.304693
tanh of 2.2 is 0.304693
log of 0.3: -1.203973
log10 of 300: 2.477121
l,le,l,le,l,le,l,le,l,le,l,le,l,le,g,ge,g,ge,g,ge,
pi has mantissa: 0.785398, exponent 2
r should be 1.0: 1.000000
  r high point 3187071009115104228782838925952666189789578010509155762176.000000
stop
running C test app td using mmap heap 
sprintf double 3.14159265358979311600
double from printf: 3.14159265358979311600
float from printf: 1.202057
double from printf r: -3.776373
sqrt of pi: 1.772454
pi in radians: 0.523599
sin of 30 degress is 0.500000
cos of 30 degrees is 0.866025
tan of 30 degrees is 0.577350
atan of 1.000000 is 0.785398
atan2 of 0.3, 0.2 is 0.982794
acos of 0.3 is 1.266104
asin of 0.3 is 0.304693
tanh of 2.2 is 0.304693
log of 0.3: -1.203973
log10 of 300: 2.477121
l,le,l,le,l,le,l,le,l,le,l,le,l,le,g,ge,g,ge,g,ge,
pi has mantissa: 0.785398, exponent 2
r should be 1.0: 1.000000
  r high point 3187071009115104228782838925952666189789578010509155762176.000000
stop
running C test app fileops using brk heap 
fp: 561216
current offset: 0
result of fseek: 0
file length from ftell: 0
empty file length: 0
result of fseek: 0
result of fwrite (should be 1): 1
current offset: 8320
result of fseek: 0
file length from ftell: 8320
8192 + 128 = 8320 file length from portable_filelen: 8320
result of fseek to middle of file: 0
result of fwrite to middle of file (should be 1): 1
fp: 561216
current offset: 0
result of fseek: 0
file length from ftell: 8320
8192 + 128 = 8320 file length: 8320
result of read at offset 0: 512
result of read at offset 512: 512
result of read at offset 1024: 512
result of read at offset 1536: 512
result of read at offset 2048: 512
result of read at offset 2560: 512
result of read at offset 3072: 512
result of read at offset 3584: 512
result of read at offset 4096: 512
result of read at offset 4608: 512
result of read at offset 5120: 512
result of read at offset 5632: 512
result of read at offset 6144: 512
result of read at offset 6656: 512
result of read at offset 7168: 512
result of read at offset 7680: 512
result of read at offset 8192: 128
testing backwards read
result of read at offset 8192: 128
result of read at offset 7680: 512
result of read at offset 7168: 512
result of read at offset 6656: 512
result of read at offset 6144: 512
result of read at offset 5632: 512
result of read at offset 5120: 512
result of read at offset 4608: 512
result of read at offset 4096: 512
result of read at offset 3584: 512
result of read at offset 3072: 512
result of read at offset 2560: 512
result of read at offset 2048: 512
result of read at offset 1536: 512
result of read at offset 1024: 512
result of read at offset 512: 512
result of read at offset 0: 512
running C test app fileops using mmap heap 
fp: 693632
current offset: 0
result of fseek: 0
file length from ftell: 0
empty file length: 0
result of fseek: 0
result of fwrite (should be 1): 1
current offset: 8320
result of fseek: 0
file length from ftell: 8320
8192 + 128 = 8320 file length from portable_filelen: 8320
result of fseek to middle of file: 0
result of fwrite to middle of file (should be 1): 1
fp: 693632
current offset: 0
result of fseek: 0
file length from ftell: 8320
8192 + 128 = 8320 file length: 8320
result of read at offset 0: 512
result of read at offset 512: 512
result of read at offset 1024: 512
result of read at offset 1536: 512
result of read at offset 2048: 512
result of read at offset 2560: 512
result of read at offset 3072: 512
result of read at offset 3584: 512
result of read at offset 4096: 512
result of read at offset 4608: 512
result of read at offset 5120: 512
result of read at offset 5632: 512
result of read at offset 6144: 512
result of read at offset 6656: 512
result of read at offset 7168: 512
result of read at offset 7680: 512
result of read at offset 8192: 128
testing backwards read
result of read at offset 8192: 128
result of read at offset 7680: 512
result of read at offset 7168: 512
result of read at offset 6656: 512
result of read at offset 6144: 512
result of read at offset 5632: 512
result of read at offset 5120: 512
result of read at offset 4608: 512
result of read at offset 4096: 512
result of read at offset 3584: 512
result of read at offset 3072: 512
result of read at offset 2560: 512
result of read at offset 2048: 512
result of read at offset 1536: 512
result of read at offset 1024: 512
result of read at offset 512: 512
result of read at offset 0: 512
running C test app t_setjmp using brk heap 
second
back in main
falling out of main
running C test app t_setjmp using mmap heap 
second
back in main
falling out of main
running C test app tex using brk heap 
top of tex
I am unwound, x: 44
caught exception exceptional
attempting large allocations
allocation 0 succeeded 0xaad70
allocation 1 succeeded 0x47b680
caught a standard execption: std::bad_alloc
leaving main
running C test app tex using mmap heap 
top of tex
I am unwound, x: 44
caught exception exceptional
attempting large allocations
allocation 0 succeeded 0x1b6010
allocation 1 succeeded 0x587010
caught a standard execption: std::bad_alloc
leaving main
running C test app trw using brk heap 
exiting trw
running C test app trw using mmap heap 
exiting trw
running C test app empty using brk heap 
yo
running C test app empty using mmap heap 
yo
running rust test app ato using brk heap 
testing atomic operations
exiting atomic testing with great success
running rust test app ato using mmap 
testing atomic operations
exiting atomic testing with great success
running rust test app real using brk heap 
testing real number operations
r32: 0.31831014
r64: 0.36787968862663156
r32 sin: 0.31296203
r64 sin: 0.3596377963109607
r32 cos: 0.9497656
r64 cos: 0.9330919866039982
r32 tan: 0.329515
r64 tan: 0.3854258759844972
r32 asin: 0.3239464
r64 asin: 0.37672777417563674
r32 acos: 1.24685
r64 acos: 1.1940685526192598
r32 atan: 0.3081693
r64 atan: 0.3525136397354091
exiting real number testing with great success
running rust test app real using mmap 
testing real number operations
r32: 0.31831014
r64: 0.36787968862663156
r32 sin: 0.31296203
r64 sin: 0.3596377963109607
r32 cos: 0.9497656
r64 cos: 0.9330919866039982
r32 tan: 0.329515
r64 tan: 0.3854258759844972
r32 asin: 0.3239464
r64 asin: 0.37672777417563674
r32 acos: 1.24685
r64 acos: 1.1940685526192598
r32 atan: 0.3081693
r64 atan: 0.3525136397354091
exiting real number testing with great success
running rust test app ttt using brk heap 
serial runtime:   5.9214ms
moves:            6493
iterations:       1
running rust test app ttt using mmap 
serial runtime:   5.7209ms
moves:            6493
iterations:       1
running rust test app e using brk heap 
testing finding e
271828182845904523536028747135266249775724709369995957496696762772407663035354759457138217852516642742746639193200305992181741359662904357290033429526059563073813232862794349076323382988075319
exiting finding e with great success
running rust test app e using mmap 
testing finding e
271828182845904523536028747135266249775724709369995957496696762772407663035354759457138217852516642742746639193200305992181741359662904357290033429526059563073813232862794349076323382988075319
exiting finding e with great success
running rust test app tap using brk heap 
starting, should tend towards 1.2020569031595942854...
first implementation...
  1.197531985674193      at 10 iterations
  1.2020074006596781     at 100 iterations
  1.2020564036593433     at 1000 iterations
  1.202056898160098      at 10000 iterations
  1.2020569031097323     at 100000 iterations
  1.202056903150321      at 1000000 iterations
second implementation...
  1.1111111111111112     at 10 iterations
  1.25                   at 100 iterations
  1.2285012285012284     at 1000 iterations
  1.1987532965715655     at 10000 iterations
  1.1989688867573887     at 100000 iterations
exiting finding ap with great success
running rust test app tap using mmap 
starting, should tend towards 1.2020569031595942854...
first implementation...
  1.197531985674193      at 10 iterations
  1.2020074006596781     at 100 iterations
  1.2020564036593433     at 1000 iterations
  1.202056898160098      at 10000 iterations
  1.2020569031097323     at 100000 iterations
  1.202056903150321      at 1000000 iterations
second implementation...
  1.1111111111111112     at 10 iterations
  1.25                   at 100 iterations
  1.2285012285012284     at 1000 iterations
  1.1987532965715655     at 10000 iterations
  1.1989688867573887     at 100000 iterations
exiting finding ap with great success
running rust test app tphi using brk heap 
phi should tend towards 1.61803398874989484820458683436563811772030
  at    5 iterations: 1.625
  at   10 iterations: 1.6179775280898876
  at   15 iterations: 1.618034447821682
  at   20 iterations: 1.618033985017358
  at   25 iterations: 1.6180339887802426
  at   30 iterations: 1.6180339887496482
  at   35 iterations: 1.618033988749897
  at   40 iterations: 1.618033988749895
exiting finding phi with great success
running rust test app tphi using mmap 
phi should tend towards 1.61803398874989484820458683436563811772030
  at    5 iterations: 1.625
  at   10 iterations: 1.6179775280898876
  at   15 iterations: 1.618034447821682
  at   20 iterations: 1.618033985017358
  at   25 iterations: 1.6180339887802426
  at   30 iterations: 1.6180339887496482
  at   35 iterations: 1.618033988749897
  at   40 iterations: 1.618033988749895
exiting finding phi with great success
running rust test app mysort using brk heap 
element count in vector: 58174
element count after dedup: 58174
running rust test app mysort using mmap 
element count in vector: 58174
element count after dedup: 58174
running rust test app fileops using brk heap 
exiting fileops with great success
running rust test app fileops using mmap 
exiting fileops with great success
running tcrash app ml 
rvos (amd64) fatal error: memory reference prior to address space: 200
pc: 10c78 main + 268
address space 10000 to 14a7000
  zero:                0,   ra:            10a78,   sp:           aa6b60,   gp:            81c80, 
    tp:            87540,   t0:                1,   t1: 2f2f2f2f2f2f2f2f,   t2:                0, 
    s0:           aa6bc0,   s1:                2,   a0:                0,   a1:            5ba73, 
    a2:           aa6d80,   a3:                0,   a4:                a,   a5:              200, 
    a6:                1,   a7:            5afd6,   s2:           aa6d68,   s3:                1, 
    s4:           aa6d80,   s5:                1,   s6:            10a10,   s7:            10420, 
    s8:                0,   s9:                0,  s10:                0,  s11:                0, 
    t3: ffffffffffffffff,   t4:            7ff68,   t5:            7a9b4,   t6:            10000, 
Built for amd64 debug on 13 Feb 24 10:44:56 by msft C++ ver 1939 on windows

running tcrash app mh 
rvos (amd64) fatal error: memory reference beyond address space: 2000000000000000
pc: 10bc8 main + 1b8
address space 10000 to 14a7000
  zero:                0,   ra:            10aa8,   sp:           aa6b60,   gp:            81c80, 
    tp:            87540,   t0:                1,   t1: 2f2f2f2f2f2f2f2f,   t2:                0, 
    s0:           aa6bc0,   s1:                2,   a0:                0,   a1:            5ba7b, 
    a2:           aa6d80,   a3:                0,   a4:                a,   a5: 2000000000000000, 
    a6:                1,   a7:            5afd6,   s2:           aa6d68,   s3:                1, 
    s4:           aa6d80,   s5:                1,   s6:            10a10,   s7:            10420, 
    s8:                0,   s9:                0,  s10:                0,  s11:                0, 
    t3: ffffffffffffffff,   t4:            7ff68,   t5:            7a9b4,   t6:            10000, 
Built for amd64 debug on 13 Feb 24 10:44:56 by msft C++ ver 1939 on windows

running tcrash app pcl 
rvos (amd64) fatal error: pc is lower than memory: 200
pc: 200  + 0
address space 10000 to 14a7000
  zero:                0,   ra:            10be8,   sp:           aa6b60,   gp:            81c80, 
    tp:            87540,   t0:                1,   t1: 2f2f2f2f2f2f2f2f,   t2:                0, 
    s0:           aa6bc0,   s1:                2,   a0:                0,   a1:            5ba84, 
    a2:           aa6d80,   a3:                0,   a4:                0,   a5:              200, 
    a6:                1,   a7:            5afd6,   s2:           aa6d68,   s3:                1, 
    s4:           aa6d80,   s5:                1,   s6:            10a10,   s7:            10420, 
    s8:                0,   s9:                0,  s10:                0,  s11:                0, 
    t3: ffffffffffffffff,   t4:            7ff68,   t5:            7a9b4,   t6:            10000, 
Built for amd64 debug on 13 Feb 24 10:44:56 by msft C++ ver 1939 on windows

running tcrash app pch 
rvos (amd64) fatal error: pc is higher than it should be: 2000000000000000
pc: 2000000000000000  + 0
address space 10000 to 14a7000
  zero:                0,   ra:            10c10,   sp:           aa6b60,   gp:            81c80, 
    tp:            87540,   t0:                1,   t1: 2f2f2f2f2f2f2f2f,   t2:                0, 
    s0:           aa6bc0,   s1:                2,   a0:                0,   a1:            5ba8c, 
    a2:           aa6d80,   a3:                0,   a4:                0,   a5: 2000000000000000, 
    a6:                1,   a7:            5afd6,   s2:           aa6d68,   s3:                1, 
    s4:           aa6d80,   s5:                1,   s6:            10a10,   s7:            10420, 
    s8:                0,   s9:                0,  s10:                0,  s11:                0, 
    t3: ffffffffffffffff,   t4:            7ff68,   t5:            7a9b4,   t6:            10000, 
Built for amd64 debug on 13 Feb 24 10:44:56 by msft C++ ver 1939 on windows

running tcrash app spl 
rvos (amd64) fatal error: stack pointer is below stack memory: a86ce0
pc: 255a8 __vfprintf_internal + c
address space 10000 to 14a7000
  zero:                0,   ra:            11fa0,   sp:           a86ce0,   gp:            81c80, 
    tp:            87540,   t0:                0,   t1:           a873f0,   t2:                0, 
    s0:                0,   s1: ffffffffffffffff,   a0:           a87298,   a1:            5ba60, 
    a2:           a873f0,   a3:                0,   a4:               18,   a5:           a87430, 
    a6:                0,   a7: fffffffffbad0000,   s2:           a87430,   s3:           a87298, 
    s4:            5ba60,   s5:           a873f0,   s6:            7ddc0,   s7:            10420, 
    s8:                0,   s9:                0,  s10:                0,  s11:                0, 
    t3:                0,   t4:               79,   t5:            7a9b4,   t6:                a, 
Built for amd64 debug on 13 Feb 24 10:44:56 by msft C++ ver 1939 on windows

running tcrash app sph 
rvos (amd64) fatal error: stack pointer is above the top of its starting point: ba6b60
pc: 10d7c rvos_sp_add + 4
address space 10000 to 14a7000
  zero:                0,   ra:            10c48,   sp:           ba6b60,   gp:            81c80, 
    tp:            87540,   t0:                1,   t1: 2f2f2f2f2f2f2f2f,   t2:                0, 
    s0:           aa6bc0,   s1:                2,   a0:           100000,   a1:            5ba9c, 
    a2:           aa6d80,   a3:                0,   a4:                0,   a5:                1, 
    a6:                1,   a7:            5afd6,   s2:           aa6d68,   s3:                1, 
    s4:           aa6d80,   s5:                1,   s6:            10a10,   s7:            10420, 
    s8:                0,   s9:                0,  s10:                0,  s11:                0, 
    t3: ffffffffffffffff,   t4:            7ff68,   t5:            7a9b4,   t6:            10000, 
Built for amd64 debug on 13 Feb 24 10:44:56 by msft C++ ver 1939 on windows

running tcrash app spm 
rvos (amd64) fatal error: the stack pointer isn't 16-byte aligned: aa6b62
pc: 10d7c rvos_sp_add + 4
address space 10000 to 14a7000
  zero:                0,   ra:            10c5c,   sp:           aa6b62,   gp:            81c80, 
    tp:            87540,   t0:                1,   t1: 2f2f2f2f2f2f2f2f,   t2:                0, 
    s0:           aa6bc0,   s1:                2,   a0:                2,   a1:            5baa4, 
    a2:           aa6d80,   a3:                0,   a4:                0,   a5:                1, 
    a6:                1,   a7:            5afd6,   s2:           aa6d68,   s3:                1, 
    s4:           aa6d80,   s5:                1,   s6:            10a10,   s7:            10420, 
    s8:                0,   s9:                0,  s10:                0,  s11:                0, 
    t3: ffffffffffffffff,   t4:            7ff68,   t5:            7a9b4,   t6:            10000, 
Built for amd64 debug on 13 Feb 24 10:44:56 by msft C++ ver 1939 on windows

running tmmap 
MAP_PRIVATE: 0x2
MAP_ANONYMOUS: 0x20
MREMAP_MAYMOVE: 0x1
mmap test completed with great success
running ttty tests 
is stdin tty:  yes
is stdout tty: no
is stdin tty:  no
is stdout tty: no
parsing input file debianrv\tp.bas
start time: 10:49:08.689
279 ms for 1 iterations
end time: 10:49:08.968
final move count 6493
exiting the basic interpreter
sorting debianrv\words.txt ==> debianrv\sorted.txt
sorting
writing...
done
a delve id
a delved i
a die veld
a dive led
a dived le
a led vied
add ive le
add le vie
addle ive
addle vie
aid delve
aide veld
ale dived
ave did le
ave id led
ave idled
dad ive le
dad le vie
dale dive
dale vied
david eel
david lee
dead evil
dead levi
dead live
dead veil
dead vile
deal dive
deal vied
dee valid
deed vial
did leave
died vale
died veal
dive lade
dive lead
dived lea
evade lid
eve id lad
id leaved
idea veld
lade vied
lead vied
start time: 10:49:10.027
1269681 microseconds for 1 iterations
end time: 10:49:11.296
final move count 6493

195D 0001$
moves: 6493
iterations: 1
0.2 seconds
moves: 6493
iterations: 1
running ntvao, ntvcm, and ntvdm 

195D 0001$
elapsed milliseconds:              197
6502 cycles:                 1,660,247
clock rate:                  unbounded
ms at 1.022727 Mhz:              1,623 == 0 days, 0 hours, 0 minutes, 1 seconds, 623 milliseconds
moves: 6493
iterations: 1

elapsed milliseconds:              193
Z80  cycles:                 5,242,794
clock rate:                  unbounded
approx ms at 4Mhz:               1,310 == 0 days, 0 hours, 0 minutes, 1 seconds, 310 milliseconds
0.2 seconds
moves: 6493
iterations: 1

elapsed milliseconds:              286
8086 cycles:                 4,773,794
clock rate:                  unbounded
approx ms at 4.77Mhz:            1,000  == 0 days, 0 hours, 0 minutes, 1 seconds, 0 milliseconds
app exit code:                       0
Tue 02/13/2024 10:49:12.88 
